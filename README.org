#+TITLE: Readme

[[file:README_CN.org][中文文档]]

* About
This is a script that deal with pdf file. At present, the following functions are supported:

1. exports the outline/toc of a PDF to a human-readable file. You can see the format [[*TOC format][here]]
2. imports the toc into a PDF
3. extracts annotations (highlights, comments, etc.) from a PDF file, and formats them as org-mode.

* Dependency

- Python 3
- [[https://github.com/pymupdf/PyMuPDF][PyMuPDF]]
  #+begin_src bash
pip3 install pymupdf
  #+end_src

* Usage
See =pdfannots.py --help= for options and invocation.

: python3 pdfhelper.py -h

#+begin_verse
usage: pdfhelper.py [-h] [--version] [--import-toc] [--export-toc] [--toc-path TOC_PATH] [--export-annot]
                    [--annot-image-dir ANNOT_IMAGE_DIR] [--ocr-api OCR_API] [--annot-path ANNOT_PATH] [--image-zoom IMAGE_ZOOM]
                    [--with-toc] [--toc-list-item-format TOC_LIST_ITEM_FORMAT] [--annot-list-item-format ANNOT_LIST_ITEM_FORMAT]
                    [--run-test]
                    INFILE

Some useful functions to process a PDF file.

positional arguments:
  INFILE                PDF file to process

optional arguments:
  -h, --help            show this help message and exit
  --version, -v         show program's version number and exit

Process TOC:
  PDF TOC <-> Human readable List

  --import-toc, -ti     load TOC_PATH into INFILE and update the pdf file.
  --export-toc, -te     export the toc of INFILE to TOC_PATH. If TOC_PATH is not set, just print to stdout
  --toc-path TOC_PATH   toc file path

Export Annots:
  --export-annot, -ae   export annotations of INPUT
  --annot-image-dir ANNOT_IMAGE_DIR
                        dir to save extracted pictures. when omitted, save to current working dir
  --ocr-api OCR_API     paddle OCR API. When set, ocr the picture and insert the result
  --annot-path ANNOT_PATH
                        file to save the exported annotations. when omitted, just print to stdout
  --image-zoom IMAGE_ZOOM
                        image zoom factor
  --with-toc            when set, the annotations are placed under corresponding outline items
  --toc-list-item-format TOC_LIST_ITEM_FORMAT
                        customize the format of toc item when WITH_TOC, default is '{checkbox} {link}'. available fields: checkbox,
                        link, title
  --annot-list-item-format ANNOT_LIST_ITEM_FORMAT
                        customize the format of annot item, default is '{checkbox} {color} {link} {content}'. available fields:
                        checkbox, color, annot_id, link, content
  --run-test            run a test instead of extracting full annotations. useful for checking output format and image qualit
#+end_verse

** TOC format
Sample toc file:
#+begin_verse
- Cover#1
- The Ten Commandments#2
- The Five Rules#3
- Contents#8
- Foreword#10
- Preface#12
# first = 16
- 1. Toys#2
- 2. Do It, Do It Again, and Again, and Again ...#14
- 3. Cons the Magnificent#32
# +2
- 4. Numbers Games#58
#+end_verse


Here, you see three ways of customization:

1. define page number: create a bookmark called 「The Five Rules」 at page 3
   #+begin_verse
- The Five Rules#3
   #+end_verse
2. set first page: create a bookmark called 「1. Toys」 at page 17 (since the first page is 16)
   #+begin_verse
# first = 16
- 1. Toys#2
   #+end_verse
   + In fact, you can use any text match "# xxx = number" to set first page to number
3. set page gap:  create a bookmark called 「4. Numbers Games」 at page 58+(16-1)-2=71 (You have to minus 2 pages gap to get correct page number)
   #+begin_verse
# +2
- 4. Numbers Games#58
   #+end_verse
   + useful when there are missing pages

** Export Annotations

Currently, the following annotation types are supported:

| Type      | Result                                                                                    |
|-----------+-------------------------------------------------------------------------------------------|
| Text      | text                                                                                      |
| Square    | picture, you can set the zoom factor by ~--image-zoom~ and ocr the picture by ~--ocr-api~ |
| Highlight | comment + text                                                                            |
| Underline | comment + text                                                                            |
| Squiggly  | comment + text                                                                            |
| StrikeOut | comment + text                                                                            |

You can customize the note format by
- ~--with-toc~
- ~--toc-list-item-format~
- ~--annot-list-item-format~

* Changelog

- 1.4.0
  + new feature =delete-annot=: Delete all annots in pdf
- 1.3.0
  + improve feature =import-toc=: Support set the first page and fix a gap. See more info [[*TOC format][here]]
- 1.2.0
  + new feature =export-annot=: Export the annotations of pdf
- 1.1.0
  + new feature =export-toc=: Export the toc of pdf to human-readable file. You can see the format [[*TOC format][here]]
  + new feature =import-toc=: Import the toc of pdf, the toc shares the same format with the exported one
* Credits
This project is inspired by the following tool:

- [[https://github.com/0xabu/pdfannots][0xabu/pdfannots: Extracts and formats text annotations from a PDF file]]: based on pdfminer and format as markdown text. It deals with hyphens but donot extract rectangle annot.
- [[https://www.cnblogs.com/pdfpatcher/archive/2011/04/12/2013974.html][PDFPatcher]](Chinese) a great pdf utility tool.
